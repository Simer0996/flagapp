{"ast":null,"code":"var _jsxFileName = \"/Users/simersingh/Downloads/flagapp/src/components/AllCountries/AllCountries.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { apiURL } from \"../util/api\";\nimport SearchInput from \"../Search/SearchInput\";\nimport FilterCountry from \"../FilterCountry/FilterCountry\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AllCountries = () => {\n  _s();\n  const [countries, setCountries] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n  const getAllCountries = async () => {\n    try {\n      const res = await fetch(`${apiURL}/all`);\n      if (!res.ok) throw new Error(\"Something went wrong!\");\n      const data = await res.json();\n      console.log(data);\n      setCountries(data);\n      setIsLoading(false);\n    } catch (error) {\n      setIsLoading(false);\n      setError(error.message);\n    }\n  };\n  const getCountryByName = async countryName => {\n    try {\n      const res = await fetch(`${apiURL}/name/${countryName}`);\n      if (!res.ok) throw new Error(\"Not found any country!\");\n      const data = await res.json();\n      setCountries(data);\n      setIsLoading(false);\n    } catch (error) {\n      setIsLoading(false);\n      setError(error.message);\n    }\n  };\n  const getCountryByRegion = async regionName => {\n    try {\n      const res = await fetch(`${apiURL}/region/${regionName}`);\n      if (!res.ok) throw new Error(\"Failed..........\");\n      const data = await res.json();\n      setCountries(data);\n      setIsLoading(false);\n    } catch (error) {\n      setIsLoading(false);\n      setError(false);\n    }\n  };\n  useEffect(() => {\n    getAllCountries();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(SearchInput, {\n          onSearch: getCountryByName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(FilterCountry, {\n          onSelect: getCountryByRegion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: [isLoading && !error && /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Loading........\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 33\n      }, this), error && !isLoading && /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 33\n      }, this), countries === null || countries === void 0 ? void 0 : countries.map(country => /*#__PURE__*/_jsxDEV(Link, {\n        to: `/country/${country.name.common}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-styling\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              className: \" block m-autow-[100%]\",\n              src: country.flags.png,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: country.name.common\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: [\"Population:\", new Intl.NumberFormat().format(country.population)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: [\" Region: \", country.region]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n              children: [\"Capital: \", country.capital]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(AllCountries, \"fhz3OS7BVETzsc7B/TH4r51GfWQ=\");\n_c = AllCountries;\nexport default AllCountries;\nvar _c;\n$RefreshReg$(_c, \"AllCountries\");","map":{"version":3,"names":["React","useState","useEffect","apiURL","SearchInput","FilterCountry","Link","AllCountries","countries","setCountries","isLoading","setIsLoading","error","setError","getAllCountries","res","fetch","ok","Error","data","json","console","log","message","getCountryByName","countryName","getCountryByRegion","regionName","map","country","name","common","flags","png","Intl","NumberFormat","format","population","region","capital"],"sources":["/Users/simersingh/Downloads/flagapp/src/components/AllCountries/AllCountries.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { apiURL } from \"../util/api\";\n\nimport SearchInput from \"../Search/SearchInput\";\nimport FilterCountry from \"../FilterCountry/FilterCountry\";\n\nimport { Link } from \"react-router-dom\";\n\nconst AllCountries = () => {\n  const [countries, setCountries] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(\"\");\n\n  const getAllCountries = async () => {\n    try {\n      const res = await fetch(`${apiURL}/all`);\n\n      if (!res.ok) throw new Error(\"Something went wrong!\");\n\n      const data = await res.json();\n\n      console.log(data);\n\n      setCountries(data);\n\n      setIsLoading(false);\n    } catch (error) {\n      setIsLoading(false);\n      setError(error.message);\n    }\n  };\n\n  const getCountryByName = async (countryName) => {\n    try {\n      const res = await fetch(`${apiURL}/name/${countryName}`);\n\n      if (!res.ok) throw new Error(\"Not found any country!\");\n\n      const data = await res.json();\n      setCountries(data);\n\n      setIsLoading(false);\n    } catch (error) {\n      setIsLoading(false);\n      setError(error.message);\n    }\n  };\n\n  const getCountryByRegion = async (regionName) => {\n    try {\n      const res = await fetch(`${apiURL}/region/${regionName}`);\n\n      if (!res.ok) throw new Error(\"Failed..........\");\n\n      const data = await res.json();\n      setCountries(data);\n\n      setIsLoading(false);\n    } catch (error) {\n      setIsLoading(false);\n      setError(false);\n    }\n  };\n\n  useEffect(() => {\n    getAllCountries();\n  }, []);\n\n  return (\n    <div>\n      <div>\n        <div>\n          <SearchInput onSearch={getCountryByName} />\n        </div>\n\n        <div>\n          <FilterCountry onSelect={getCountryByRegion} />\n        </div>\n      </div>\n\n      <div className=\"grid-container\">\n        {isLoading && !error && <h4>Loading........</h4>}\n        {error && !isLoading && <h4>{error}</h4>}\n\n        {countries?.map((country) => (\n          <Link to={`/country/${country.name.common}`}>\n            <div className=\"card-styling\">\n              <div>\n                <img className=\" block m-autow-[100%]\" src={country.flags.png} alt=\"\" />\n              </div>\n\n              <div>\n                <h3>{country.name.common}</h3>\n                <h6>\n                  Population:\n                  {new Intl.NumberFormat().format(country.population)}\n                </h6>\n                <h6> Region: {country.region}</h6>\n                <h6>Capital: {country.capital}</h6>\n              </div>\n            </div>\n          </Link>\n        ))}\n      </div>\n    </div >\n  );\n};\n\nexport default AllCountries;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}